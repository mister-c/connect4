// Connect Four is a game where you try to drop 4 chips in a row that connect

var game = new Phaser.Game(800, 600, Phaser.CANVAS, "", {preload: preload, create: create, update: update, render: render});

function initBoard(){
    var board_g;
    var chip_g;

    var board;
    var canvas;
    var circle;

    var board_width;
    var board_height;
    
    var cell_arr;
    var chip_size;
    var chip_spacing;
    var num_column;
    var num_row;

    var bottom_bound_box;

    // Instance variable for the board
    board_width  = (game.width  *  0.6 );
    board_height = (board_width * (6/7));
 
    num_row      = 6;
    num_column   = 7;
    chip_spacing = 15;
    chip_arr = new Array(num_row);

    // Each cell has a size that is the 1/7th the full height of the board
    // includes an adjustment for the spacing
    chip_size = (
	((board_width - (chip_spacing * (num_column + 1) )) / num_column)
    );
    chip_size = Math.round(chip_size);
    
    // * is empty
    // R is red
    // B is blue
    for (var i = 0; i < num_column; i++) {
	chip_arr[i] = Array(num_row);
	for(var j = 0; j < num_row; j++){
	    chip_arr[i][j] = {};
	    chip_arr[i][j].color = "*";
	}
    }

    // Use a canvas object to create the board graphics
    canvas = document.createElement("canvas");
    canvas.width  = board_width;
    canvas.height = board_height;
    
    ctx = canvas.getContext("2d");

    // Draw the game board
    ctx.beginPath();
    ctx.fillStyle = "rgb(75, 75, 75)";
    ctx.moveTo(0, 0);
    ctx.lineTo(board_width, 0           );
    ctx.lineTo(board_width, board_height);
    ctx.lineTo(0,           board_height);
    ctx.lineTo(0,           0           );
    ctx.closePath();
    
    // Draw the lil circles in the game board
    for (var i = 0; i < num_column; i++){
    	for (var j = 0; j < num_row; j++){
    	    cell_x_pos = 0 + (chip_size * 0.5) + (chip_size * i) + (chip_spacing * (i + 1));
    	    cell_y_pos = 0 + (chip_size * 0.5) + (chip_size * j) + (chip_spacing * (j + 1));

    	    cell_x_pos = Math.round(cell_x_pos);
    	    cell_y_pos = Math.round(cell_y_pos);
	    
	    ctx.arc(cell_x_pos, cell_y_pos, 30, 0, 2* Math.PI, true);
	    ctx.closePath();
    	}
    }
    ctx.fill();

    // Turn the canvas object into a mother fuckin' SPRITE
    board = game.add.sprite(0, 0, PIXI.Texture.fromCanvas(canvas));
    board.name = "board";

    // Take all of the instance variables and assign them to our new SPRITE object
    board.width  = board_width;
    board.height = board_height;

    board.chip_spacing = chip_spacing;
    board.chip_size    = chip_size;

    board.num_column = num_column;
    board.num_row    = num_row;

    board.circle_graphics = game.add.graphics(0, 0);

    board.chip_arr = chip_arr;
    board.chip_g   = game.add.group();
    board.chip_g.z = 0;
    
    board_g = game.add.group();
    board_g.add(board);
    board.z = 2;

    // Create a invisible box at the bottom of the board so the chips don't slip
    // through and fall off the screen
    bottom_bound_box        = game.add.sprite(board.x, board.y + board.height);
    bottom_bound_box.name   = "bottom_bound_box";
    bottom_bound_box.width  = board.width;
    bottom_bound_box.height = 30;

    // Add stuff to the board_g group so that its all nicely packaged together
    board_g.add(bottom_bound_box);
    bottom_bound_box.y -= board.chip_spacing * 0.5;
    
    board_g.x = (game.width  * ((1 - (board_width  / game.width )) / 2));
    board_g.y = (game.height * ((1 - (board_height / game.height)) / 2));
    board_g.z = 2;

    // Hold out invisible rectangle in place so it doesnt slide around
    // when chips bump into it
    game.physics.arcade.enable(bottom_bound_box);
    bottom_bound_box.body.allowGravity = false;
    bottom_bound_box.body.immovable = true;
    
    // Return the board
    return board_g;
}

function getTopChip(column_index){
    chip_arr = window.board_g.getChildAt(0).chip_arr;

    // Search the chip array for the topmost available chip
    for (var i = (chip_arr[column_index].length - 1); i > -1 ; i--){
	if(chip_arr[column_index][i].color == "*"){
	    return i;
	}
    }
}

function dropChip(column_index, chip_color){
    var board;
    var chip_arr;

    var top_chip_index;
    
    board = window.board_g.getChildAt(0);
    chip_arr = board.chip_arr;

    // Get the index of the top chip so we know where
    // the new chip should land
    top_chip_index = getTopChip(column_index);

    if(top_chip_index < chip_arr[column_index].length){
	// Set the color of the chip to indicate who dropped the chip
	chip_arr[column_index][top_chip_index].color = chip_color;

	// Create a sprite so the chip has some graphics
	chip_arr[column_index][top_chip_index].sprite        = game.add.sprite((board_g.x + (board.chip_spacing * 0.5) + ((board.chip_size + board.chip_spacing) * column_index)), 0);
	chip_arr[column_index][top_chip_index].sprite.name   = "chip_" + top_chip_index;
	chip_arr[column_index][top_chip_index].sprite.width  = board.chip_size + (board.chip_spacing * 1);
	chip_arr[column_index][top_chip_index].sprite.height = board.chip_size + (board.chip_spacing * 1);
	chip_arr[column_index][top_chip_index].sprite.z = 0;

	// Clear off old graphics
	board.circle_graphics.clear();
	
	// Refactor this so it allows for different colors
	board.circle_graphics.beginFill(0xff0000);

	// Draw a plain circle to server as the chip sprite
	board.circle_graphics.drawCircle(0, 0, chip_arr[column_index][top_chip_index].sprite.height);
	chip_arr[column_index][top_chip_index].sprite.texture = board.circle_graphics.generateTexture();
	board.circle_graphics.clear();
	chip_arr[column_index][top_chip_index].sprite.scale.x = 1;
	chip_arr[column_index][top_chip_index].sprite.scale.y = 1;

	// Let the sprite fall. Falling is easy. Anyone can fall.
	game.physics.enable(chip_arr[column_index][top_chip_index].sprite);

	// Try to get the sprites to exist at the right goddamn depth!!!
	game.world.sort(0, Phaser.Group.SORT_ASCENDING);

	// Set this chip as the active chip so it is factored into collisions
	board.activeChip = chip_arr[column_index][top_chip_index].sprite;
    } else {
	// Need more rebost handling of this condition....
	console.log("chip_arr is FULL!");
    }
    
}

function debugChipArr(){
    var chip_arr;
    var row_display_string;

    chip_arr = window.board_g.getChildAt(0).chip_arr;

    // Order of index values is....
    // chip_arr[column_index][row_index]
    for (var i = 0; i < chip_arr[0].length; i++) {
	// console.log(chip_arr[i]);
	row_display_string = i + ") ";
	for(var j = 0; j < chip_arr.length; j++){
	    row_display_string += " " + chip_arr[j][i].color;
	}
	console.log(row_display_string);
    }
}

function alignChipGrid(){

}

function chipCollide(collision_body, chip){
    var board;

    board = window.board_g.getChildAt(0);

    // Stop the chip from moving
    chip.body.allowGravity = false;
    chip.body.immovable    = true;
    chip.body.speed    = 0;
    chip.body.velocity = 0;

    // Remove the chip from active state and add it to the
    // chip group
    board.activeChip = undefined;
    board.chip_g.add(chip);

    console.log("CH-CH CHIP COLLIDE!!!");
    console.log("Name: " + chip.name);

    // Will use this later to force chips to align to the grid
    // alignChipGrid();
}

function checkWin(){
    var board;
    var chip_string;

    var i;
    var j;
    
    board = window.board_g.getChildAt(0);

    // Check vertical wins
    for (var i = 0; i < board.chip_arr.length; i++){
    	chip_string = "";
    	for (var j = 0; j < board.chip_arr[i].length; j++){
    	    chip_string += board.chip_arr[i][j].color;
    	}
    	if(chip_string.match("[RY]{4}") != null){
    	    console.log("its a win!");
    	}
    }
    // Check horizontal wins
    // indexes i and j are flipped here CONFUSINGING!??!
    for (var i = 0; i < board.num_row; i++){
	chip_string = "";
	for(var j = 0; j < board.num_column; j++){
	    chip_string += board.chip_arr[j][i].color;
	}
    	if(chip_string.match("[RY]{4}") != null){
    	    console.log("its a win!");
    	}
    }
    
    // Check for diagnol 1: NW to SE - bottom

    // // Initalize our variables for iterating diagnols
    // i = 0;
    // j = 0;

    // for (var diag_index = 0; diag_index < board.num_row; diag_index ++){
    // 	i = 0;
    // 	j = diag_index;
	
    // 	chip_string = "";
	
    // 	while (i < board.num_column && j < board.num_row){
    // 	    chip_string += board.chip_arr[i][j].color;
	    
    // 	    i++;
    // 	    j++;
    // 	}
    // 	console.log(chip_string);
    // }

    i = 0;
    j = 0;

    for (var diag_index = 0; diag_index < board.num_column; diag_index++){
	i = diag_index;
	j = 0;
	
	chip_string = "";
	
	while (i < board.num_column && j < board.num_row){
	    chip_string += board.chip_arr[i][j].color;
	    
	    i++;
	    j++;
	}
	console.log(chip_string);
    }
    
    
    // Check for diagnol 2: NW to SE - top
    // Check for diagnol 3: SW to NE - top
    // Check for diagnol 4: SW to NE - bottom
    
}

//==================================================

function preload(){
    // This game dun use no sprites
    // so FUCK this function

    // It probably will later though...
}

function create(){
    var circle_graphics;
    
    var board;
    var board_g;

    game.stage.backgroundColor = "#000000";
    
    // Rev up those physics
    game.physics.startSystem(Phaser.Physics.ARCADE);

    // Create the game board
    board_g = initBoard();
    board   = board_g.getChildAt(0);

    // Set the gravity level and sort the sprites
    game.physics.arcade.gravity.y = 900;
    game.world.sort(0, Phaser.Group.SORT_ASCENDING);
    
    // Use globals.... sigh
    window.board_g = board_g;
}

function update(){
    var bottom_bound_box;
    var board;
    
    bottom_bound_box = window.board_g.getChildAt(1);
    board = window.board_g.getChildAt(0);

    if(board.activeChip){
	game.physics.arcade.collide(bottom_bound_box, board.activeChip, chipCollide);
	game.physics.arcade.collide(board.chip_g.children, board.activeChip, chipCollide);
    }
}

function render(){
    var bottom_bound_box;
    var board;

    // bottom_bound_box = window.board_g.getChildAt(1);
    // board = window.board_g.getChildAt(0);
    
    // game.debug.spriteBounds(bottom_bound_box);
    // game.debug.spriteBounds(board.chip_g);
}
